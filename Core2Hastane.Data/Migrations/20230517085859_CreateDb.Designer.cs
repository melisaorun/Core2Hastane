// <auto-generated />
using Core2Hastane.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Core2Hastane.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230517085859_CreateDb")]
    partial class CreateDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core2Hastane.model.Doktorlar", b =>
                {
                    b.Property<int>("DoktorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DoktorAdSoyad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RandevuId")
                        .HasColumnType("int");

                    b.Property<string>("Unvan")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoktorId");

                    b.HasIndex("RandevuId");

                    b.ToTable("Doktorlar");
                });

            modelBuilder.Entity("Core2Hastane.model.Hastalar", b =>
                {
                    b.Property<int>("HastaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HastaAdiSoyadi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HastaDT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HastaTC")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int>("RandevuId")
                        .HasColumnType("int");

                    b.HasKey("HastaId");

                    b.HasIndex("RandevuId");

                    b.ToTable("Hastalar");
                });

            modelBuilder.Entity("Core2Hastane.model.Poliklinikler", b =>
                {
                    b.Property<int>("BolumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BolumAdi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DoktorAdSoyad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoktorId")
                        .HasColumnType("int");

                    b.HasKey("BolumId");

                    b.HasIndex("DoktorId");

                    b.ToTable("Poliklinikler");
                });

            modelBuilder.Entity("Core2Hastane.model.Randevular", b =>
                {
                    b.Property<int>("RandevuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BolumAdi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoktorAdSoyad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HastaAdiSoyadi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RandevuSaati")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RandevuTarihi")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("RandevuId");

                    b.ToTable("Randevular");
                });

            modelBuilder.Entity("Core2Hastane.model.Doktorlar", b =>
                {
                    b.HasOne("Core2Hastane.model.Randevular", "Randevular")
                        .WithMany()
                        .HasForeignKey("RandevuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Randevular");
                });

            modelBuilder.Entity("Core2Hastane.model.Hastalar", b =>
                {
                    b.HasOne("Core2Hastane.model.Randevular", "Randevular")
                        .WithMany()
                        .HasForeignKey("RandevuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Randevular");
                });

            modelBuilder.Entity("Core2Hastane.model.Poliklinikler", b =>
                {
                    b.HasOne("Core2Hastane.model.Doktorlar", "Doktorlar")
                        .WithMany()
                        .HasForeignKey("DoktorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doktorlar");
                });
#pragma warning restore 612, 618
        }
    }
}
